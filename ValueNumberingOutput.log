LVN (Modified Vars): test
    store i32 %a, ptr %a.addr, align 4
    => VN: 1
    store i32 %b, ptr %b.addr, align 4
    => VN: 2
    %0 = load i32, ptr %a.addr, align 4
    => VN: 1
    %1 = load i32, ptr %b.addr, align 4
    => VN: 2
    %add = add nsw i32 %0, %1
    => VN: 3
    store i32 %add, ptr %c, align 4
    => VN: 3
    %2 = load i32, ptr %b.addr, align 4
    => VN: 2
    %3 = load i32, ptr %c, align 4
    => VN: 3
    %add1 = add nsw i32 %2, %3
    => VN: 4
    store i32 %add1, ptr %d, align 4
    => VN: 4
    %4 = load i32, ptr %a.addr, align 4
    => VN: 1
    %5 = load i32, ptr %b.addr, align 4
    => VN: 2
    %add2 = add nsw i32 %4, %5
    => VN: 3 (redundant)
    store i32 %add2, ptr %e, align 4
    => VN: 3
    %6 = load i32, ptr %b.addr, align 4
    => VN: 2
    %7 = load i32, ptr %e, align 4
    => VN: 3
    %add3 = add nsw i32 %6, %7
    => VN: 4 (redundant)
    store i32 %add3, ptr %f, align 4
    => VN: 4
    %8 = load i32, ptr %f, align 4
    => VN: 4

LVN (Modified Vars): test1
    store i32 %a, ptr %a.addr, align 4
    => VN: 1
    store i32 %b, ptr %b.addr, align 4
    => VN: 2
    store i32 %c, ptr %c.addr, align 4
    => VN: 3
    store i32 %d, ptr %d.addr, align 4
    => VN: 4
    store i32 %e, ptr %e.addr, align 4
    => VN: 5
    store i32 %f, ptr %f.addr, align 4
    => VN: 6
    store i32 %g, ptr %g.addr, align 4
    => VN: 7
    %0 = load i32, ptr %a.addr, align 4
    => VN: 1
    %1 = load i32, ptr %b.addr, align 4
    => VN: 2
    %add = add nsw i32 %0, %1
    => VN: 8
    store i32 %add, ptr %c.addr, align 4
    => VN: 8
    %2 = load i32, ptr %c.addr, align 4
    => VN: 8
    %add1 = add nsw i32 %2, 5
    => VN: 10
    store i32 %add1, ptr %d.addr, align 4
    => VN: 10
    %3 = load i32, ptr %a.addr, align 4
    => VN: 1
    %4 = load i32, ptr %b.addr, align 4
    => VN: 2
    %add2 = add nsw i32 %3, %4
    => VN: 8 (redundant)
    store i32 %add2, ptr %e.addr, align 4
    => VN: 8
    %5 = load i32, ptr %e.addr, align 4
    => VN: 8
    %add3 = add nsw i32 %5, 5
    => VN: 10 (redundant)
    store i32 %add3, ptr %f.addr, align 4
    => VN: 10
    %6 = load i32, ptr %d.addr, align 4
    => VN: 10
    %7 = load i32, ptr %f.addr, align 4
    => VN: 10
    %add4 = add nsw i32 %6, %7
    => VN: 11
    store i32 %add4, ptr %g.addr, align 4
    => VN: 11

LVN (Modified Vars): test2
    store i32 %a, ptr %a.addr, align 4
    => VN: 1
    store i32 %b, ptr %b.addr, align 4
    => VN: 2
    store i32 %c, ptr %c.addr, align 4
    => VN: 3
    store i32 %x, ptr %x.addr, align 4
    => VN: 4
    store i32 %y, ptr %y.addr, align 4
    => VN: 5
    %0 = load i32, ptr %x.addr, align 4
    => VN: 4
    %1 = load i32, ptr %y.addr, align 4
    => VN: 5
    %add = add nsw i32 %0, %1
    => VN: 6
    store i32 %add, ptr %b.addr, align 4
    => VN: 6
    %2 = load i32, ptr %x.addr, align 4
    => VN: 4
    %3 = load i32, ptr %y.addr, align 4
    => VN: 5
    %add1 = add nsw i32 %2, %3
    => VN: 6 (redundant)
    store i32 %add1, ptr %a.addr, align 4
    => VN: 6
    store i32 17, ptr %a.addr, align 4
    => VN: 7
    %4 = load i32, ptr %x.addr, align 4
    => VN: 4
    %5 = load i32, ptr %y.addr, align 4
    => VN: 5
    %add2 = add nsw i32 %4, %5
    => VN: 6 (redundant)
    store i32 %add2, ptr %c.addr, align 4
    => VN: 6

LVN (Modified Vars): test3
    store i32 %a, ptr %a.addr, align 4
    => VN: 1
    store i32 %c, ptr %c.addr, align 4
    => VN: 2
    store i32 %d, ptr %d.addr, align 4
    => VN: 3
    store i32 %x, ptr %x.addr, align 4
    => VN: 4
    store i32 %y, ptr %y.addr, align 4
    => VN: 5
    store i32 %z, ptr %z.addr, align 4
    => VN: 6
    %0 = load i32, ptr %x.addr, align 4
    => VN: 4
    %1 = load i32, ptr %y.addr, align 4
    => VN: 5
    %add = add nsw i32 %0, %1
    => VN: 7
    store i32 %add, ptr %a.addr, align 4
    => VN: 7
    %2 = load i32, ptr %y.addr, align 4
    => VN: 5
    store i32 %2, ptr %z.addr, align 4
    => VN: 5
    store i32 17, ptr %d.addr, align 4
    => VN: 8
    %3 = load i32, ptr %x.addr, align 4
    => VN: 4
    %4 = load i32, ptr %z.addr, align 4
    => VN: 5
    %add1 = add nsw i32 %3, %4
    => VN: 7 (redundant)
    store i32 %add1, ptr %c.addr, align 4
    => VN: 7

LVN (Modified Vars): test4
    store i32 %a, ptr %a.addr, align 4
    => VN: 1
    store i32 %b, ptr %b.addr, align 4
    => VN: 2
    store i32 %c, ptr %c.addr, align 4
    => VN: 3
    store i32 %d, ptr %d.addr, align 4
    => VN: 4
    %0 = load i32, ptr %b.addr, align 4
    => VN: 2
    %1 = load i32, ptr %c.addr, align 4
    => VN: 3
    %add = add nsw i32 %0, %1
    => VN: 5
    store i32 %add, ptr %a.addr, align 4
    => VN: 5
    %2 = load i32, ptr %a.addr, align 4
    => VN: 5
    %3 = load i32, ptr %d.addr, align 4
    => VN: 4
    %sub = sub nsw i32 %2, %3
    => VN: 6
    store i32 %sub, ptr %b.addr, align 4
    => VN: 6
    %4 = load i32, ptr %b.addr, align 4
    => VN: 6
    %5 = load i32, ptr %c.addr, align 4
    => VN: 3
    %add1 = add nsw i32 %4, %5
    => VN: 7
    store i32 %add1, ptr %c.addr, align 4
    => VN: 7
    %6 = load i32, ptr %a.addr, align 4
    => VN: 5
    %7 = load i32, ptr %d.addr, align 4
    => VN: 4
    %sub2 = sub nsw i32 %6, %7
    => VN: 6 (redundant)
    store i32 %sub2, ptr %d.addr, align 4
    => VN: 6

LVN (Modified Vars): test5
    store i32 %a, ptr %a.addr, align 4
    => VN: 1
    store i32 %b, ptr %b.addr, align 4
    => VN: 2
    store i32 %c, ptr %c.addr, align 4
    => VN: 3
    store i32 %d, ptr %d.addr, align 4
    => VN: 4
    store i32 %e, ptr %e.addr, align 4
    => VN: 5
    %0 = load i32, ptr %b.addr, align 4
    => VN: 2
    %1 = load i32, ptr %c.addr, align 4
    => VN: 3
    %mul = mul nsw i32 %0, %1
    => VN: 6
    store i32 %mul, ptr %a.addr, align 4
    => VN: 6
    %2 = load i32, ptr %b.addr, align 4
    => VN: 2
    store i32 %2, ptr %d.addr, align 4
    => VN: 2
    %3 = load i32, ptr %a.addr, align 4
    => VN: 6
    %4 = load i32, ptr %b.addr, align 4
    => VN: 2
    %add = add nsw i32 %3, %4
    => VN: 7
    store i32 %add, ptr %c.addr, align 4
    => VN: 7
    %5 = load i32, ptr %d.addr, align 4
    => VN: 2
    %6 = load i32, ptr %c.addr, align 4
    => VN: 7
    %mul1 = mul nsw i32 %5, %6
    => VN: 8
    store i32 %mul1, ptr %e.addr, align 4
    => VN: 8
    %7 = load i32, ptr %c.addr, align 4
    => VN: 7
    %add2 = add nsw i32 %7, 5
    => VN: 10
    store i32 %add2, ptr %d.addr, align 4
    => VN: 10

LVN (Modified Vars): test6
    store i32 %c, ptr %c.addr, align 4
    => VN: 1
    store i32 %d, ptr %d.addr, align 4
    => VN: 2
    store i32 %e, ptr %e.addr, align 4
    => VN: 3
    store i32 %i, ptr %i.addr, align 4
    => VN: 4
    store i32 %j, ptr %j.addr, align 4
    => VN: 5
    store i32 10, ptr %a, align 4
    => VN: 6
    store i32 40, ptr %b, align 4
    => VN: 7
    %0 = load i32, ptr %i.addr, align 4
    => VN: 4
    %1 = load i32, ptr %j.addr, align 4
    => VN: 5
    %mul = mul nsw i32 %0, %1
    => VN: 8
    store i32 %mul, ptr %t1, align 4
    => VN: 8
    %2 = load i32, ptr %t1, align 4
    => VN: 8
    %add = add nsw i32 %2, 40
    => VN: 9
    store i32 %add, ptr %c.addr, align 4
    => VN: 9
    store i32 150, ptr %t2, align 4
    => VN: 10
    %3 = load i32, ptr %c.addr, align 4
    => VN: 9
    %mul1 = mul nsw i32 150, %3
    => VN: 11
    store i32 %mul1, ptr %d.addr, align 4
    => VN: 11
    %4 = load i32, ptr %i.addr, align 4
    => VN: 4
    store i32 %4, ptr %e.addr, align 4
    => VN: 4
    %5 = load i32, ptr %i.addr, align 4
    => VN: 4
    %6 = load i32, ptr %j.addr, align 4
    => VN: 5
    %mul2 = mul nsw i32 %5, %6
    => VN: 8 (redundant)
    store i32 %mul2, ptr %t3, align 4
    => VN: 8
    %7 = load i32, ptr %i.addr, align 4
    => VN: 4
    %mul3 = mul nsw i32 %7, 10
    => VN: 12
    store i32 %mul3, ptr %t4, align 4
    => VN: 12
    %8 = load i32, ptr %t1, align 4
    => VN: 8
    %9 = load i32, ptr %t4, align 4
    => VN: 12
    %add4 = add nsw i32 %8, %9
    => VN: 13
    store i32 %add4, ptr %c.addr, align 4
    => VN: 13

LVN (Modified Vars): test
    store i32 %a, ptr %a.addr, align 4
    => VN: 1
    store i32 %b, ptr %b.addr, align 4
    => VN: 2
    %0 = load i32, ptr %a.addr, align 4
    => VN: 1
    %1 = load i32, ptr %b.addr, align 4
    => VN: 2
    %add = add nsw i32 %0, %1
    => VN: 3
    store i32 %add, ptr %c, align 4
    => VN: 3
    %2 = load i32, ptr %b.addr, align 4
    => VN: 2
    %3 = load i32, ptr %c, align 4
    => VN: 3
    %add1 = add nsw i32 %2, %3
    => VN: 4
    store i32 %add1, ptr %d, align 4
    => VN: 4
    %4 = load i32, ptr %a.addr, align 4
    => VN: 1
    %5 = load i32, ptr %b.addr, align 4
    => VN: 2
    %add2 = add nsw i32 %4, %5
    => VN: 3 (redundant)
    store i32 %add2, ptr %e, align 4
    => VN: 3
    %6 = load i32, ptr %b.addr, align 4
    => VN: 2
    %7 = load i32, ptr %e, align 4
    => VN: 3
    %add3 = add nsw i32 %6, %7
    => VN: 4 (redundant)
    store i32 %add3, ptr %f, align 4
    => VN: 4
    %8 = load i32, ptr %f, align 4
    => VN: 4

LVN (Modified Vars): test1
    store i32 %a, ptr %a.addr, align 4
    => VN: 1
    store i32 %b, ptr %b.addr, align 4
    => VN: 2
    store i32 %c, ptr %c.addr, align 4
    => VN: 3
    store i32 %d, ptr %d.addr, align 4
    => VN: 4
    store i32 %e, ptr %e.addr, align 4
    => VN: 5
    store i32 %f, ptr %f.addr, align 4
    => VN: 6
    store i32 %g, ptr %g.addr, align 4
    => VN: 7
    %0 = load i32, ptr %a.addr, align 4
    => VN: 1
    %1 = load i32, ptr %b.addr, align 4
    => VN: 2
    %add = add nsw i32 %0, %1
    => VN: 8
    store i32 %add, ptr %c.addr, align 4
    => VN: 8
    %2 = load i32, ptr %c.addr, align 4
    => VN: 8
    %add1 = add nsw i32 %2, 5
    => VN: 10
    store i32 %add1, ptr %d.addr, align 4
    => VN: 10
    %3 = load i32, ptr %a.addr, align 4
    => VN: 1
    %4 = load i32, ptr %b.addr, align 4
    => VN: 2
    %add2 = add nsw i32 %3, %4
    => VN: 8 (redundant)
    store i32 %add2, ptr %e.addr, align 4
    => VN: 8
    %5 = load i32, ptr %e.addr, align 4
    => VN: 8
    %add3 = add nsw i32 %5, 5
    => VN: 10 (redundant)
    store i32 %add3, ptr %f.addr, align 4
    => VN: 10
    %6 = load i32, ptr %d.addr, align 4
    => VN: 10
    %7 = load i32, ptr %f.addr, align 4
    => VN: 10
    %add4 = add nsw i32 %6, %7
    => VN: 11
    store i32 %add4, ptr %g.addr, align 4
    => VN: 11

LVN (Modified Vars): test2
    store i32 %a, ptr %a.addr, align 4
    => VN: 1
    store i32 %b, ptr %b.addr, align 4
    => VN: 2
    store i32 %c, ptr %c.addr, align 4
    => VN: 3
    store i32 %x, ptr %x.addr, align 4
    => VN: 4
    store i32 %y, ptr %y.addr, align 4
    => VN: 5
    %0 = load i32, ptr %x.addr, align 4
    => VN: 4
    %1 = load i32, ptr %y.addr, align 4
    => VN: 5
    %add = add nsw i32 %0, %1
    => VN: 6
    store i32 %add, ptr %b.addr, align 4
    => VN: 6
    %2 = load i32, ptr %x.addr, align 4
    => VN: 4
    %3 = load i32, ptr %y.addr, align 4
    => VN: 5
    %add1 = add nsw i32 %2, %3
    => VN: 6 (redundant)
    store i32 %add1, ptr %a.addr, align 4
    => VN: 6
    store i32 17, ptr %a.addr, align 4
    => VN: 7
    %4 = load i32, ptr %x.addr, align 4
    => VN: 4
    %5 = load i32, ptr %y.addr, align 4
    => VN: 5
    %add2 = add nsw i32 %4, %5
    => VN: 6 (redundant)
    store i32 %add2, ptr %c.addr, align 4
    => VN: 6

LVN (Modified Vars): test3
    store i32 %a, ptr %a.addr, align 4
    => VN: 1
    store i32 %c, ptr %c.addr, align 4
    => VN: 2
    store i32 %d, ptr %d.addr, align 4
    => VN: 3
    store i32 %x, ptr %x.addr, align 4
    => VN: 4
    store i32 %y, ptr %y.addr, align 4
    => VN: 5
    store i32 %z, ptr %z.addr, align 4
    => VN: 6
    %0 = load i32, ptr %x.addr, align 4
    => VN: 4
    %1 = load i32, ptr %y.addr, align 4
    => VN: 5
    %add = add nsw i32 %0, %1
    => VN: 7
    store i32 %add, ptr %a.addr, align 4
    => VN: 7
    %2 = load i32, ptr %y.addr, align 4
    => VN: 5
    store i32 %2, ptr %z.addr, align 4
    => VN: 5
    store i32 17, ptr %d.addr, align 4
    => VN: 8
    %3 = load i32, ptr %x.addr, align 4
    => VN: 4
    %4 = load i32, ptr %z.addr, align 4
    => VN: 5
    %add1 = add nsw i32 %3, %4
    => VN: 7 (redundant)
    store i32 %add1, ptr %c.addr, align 4
    => VN: 7

LVN (Modified Vars): test4
    store i32 %a, ptr %a.addr, align 4
    => VN: 1
    store i32 %b, ptr %b.addr, align 4
    => VN: 2
    store i32 %c, ptr %c.addr, align 4
    => VN: 3
    store i32 %d, ptr %d.addr, align 4
    => VN: 4
    %0 = load i32, ptr %b.addr, align 4
    => VN: 2
    %1 = load i32, ptr %c.addr, align 4
    => VN: 3
    %add = add nsw i32 %0, %1
    => VN: 5
    store i32 %add, ptr %a.addr, align 4
    => VN: 5
    %2 = load i32, ptr %a.addr, align 4
    => VN: 5
    %3 = load i32, ptr %d.addr, align 4
    => VN: 4
    %sub = sub nsw i32 %2, %3
    => VN: 6
    store i32 %sub, ptr %b.addr, align 4
    => VN: 6
    %4 = load i32, ptr %b.addr, align 4
    => VN: 6
    %5 = load i32, ptr %c.addr, align 4
    => VN: 3
    %add1 = add nsw i32 %4, %5
    => VN: 7
    store i32 %add1, ptr %c.addr, align 4
    => VN: 7
    %6 = load i32, ptr %a.addr, align 4
    => VN: 5
    %7 = load i32, ptr %d.addr, align 4
    => VN: 4
    %sub2 = sub nsw i32 %6, %7
    => VN: 6 (redundant)
    store i32 %sub2, ptr %d.addr, align 4
    => VN: 6

LVN (Modified Vars): test5
    store i32 %a, ptr %a.addr, align 4
    => VN: 1
    store i32 %b, ptr %b.addr, align 4
    => VN: 2
    store i32 %c, ptr %c.addr, align 4
    => VN: 3
    store i32 %d, ptr %d.addr, align 4
    => VN: 4
    store i32 %e, ptr %e.addr, align 4
    => VN: 5
    %0 = load i32, ptr %b.addr, align 4
    => VN: 2
    %1 = load i32, ptr %c.addr, align 4
    => VN: 3
    %mul = mul nsw i32 %0, %1
    => VN: 6
    store i32 %mul, ptr %a.addr, align 4
    => VN: 6
    %2 = load i32, ptr %b.addr, align 4
    => VN: 2
    store i32 %2, ptr %d.addr, align 4
    => VN: 2
    %3 = load i32, ptr %a.addr, align 4
    => VN: 6
    %4 = load i32, ptr %b.addr, align 4
    => VN: 2
    %add = add nsw i32 %3, %4
    => VN: 7
    store i32 %add, ptr %c.addr, align 4
    => VN: 7
    %5 = load i32, ptr %d.addr, align 4
    => VN: 2
    %6 = load i32, ptr %c.addr, align 4
    => VN: 7
    %mul1 = mul nsw i32 %5, %6
    => VN: 8
    store i32 %mul1, ptr %e.addr, align 4
    => VN: 8
    %7 = load i32, ptr %c.addr, align 4
    => VN: 7
    %add2 = add nsw i32 %7, 5
    => VN: 10
    store i32 %add2, ptr %d.addr, align 4
    => VN: 10

LVN (Modified Vars): test6
    store i32 %c, ptr %c.addr, align 4
    => VN: 1
    store i32 %d, ptr %d.addr, align 4
    => VN: 2
    store i32 %e, ptr %e.addr, align 4
    => VN: 3
    store i32 %i, ptr %i.addr, align 4
    => VN: 4
    store i32 %j, ptr %j.addr, align 4
    => VN: 5
    store i32 10, ptr %a, align 4
    => VN: 6
    store i32 40, ptr %b, align 4
    => VN: 7
    %0 = load i32, ptr %i.addr, align 4
    => VN: 4
    %1 = load i32, ptr %j.addr, align 4
    => VN: 5
    %mul = mul nsw i32 %0, %1
    => VN: 8
    store i32 %mul, ptr %t1, align 4
    => VN: 8
    %2 = load i32, ptr %t1, align 4
    => VN: 8
    %add = add nsw i32 %2, 40
    => VN: 9
    store i32 %add, ptr %c.addr, align 4
    => VN: 9
    store i32 150, ptr %t2, align 4
    => VN: 10
    %3 = load i32, ptr %c.addr, align 4
    => VN: 9
    %mul1 = mul nsw i32 150, %3
    => VN: 11
    store i32 %mul1, ptr %d.addr, align 4
    => VN: 11
    %4 = load i32, ptr %i.addr, align 4
    => VN: 4
    store i32 %4, ptr %e.addr, align 4
    => VN: 4
    %5 = load i32, ptr %i.addr, align 4
    => VN: 4
    %6 = load i32, ptr %j.addr, align 4
    => VN: 5
    %mul2 = mul nsw i32 %5, %6
    => VN: 8 (redundant)
    store i32 %mul2, ptr %t3, align 4
    => VN: 8
    %7 = load i32, ptr %i.addr, align 4
    => VN: 4
    %mul3 = mul nsw i32 %7, 10
    => VN: 12
    store i32 %mul3, ptr %t4, align 4
    => VN: 12
    %8 = load i32, ptr %t1, align 4
    => VN: 8
    %9 = load i32, ptr %t4, align 4
    => VN: 12
    %add4 = add nsw i32 %8, %9
    => VN: 13
    store i32 %add4, ptr %c.addr, align 4
    => VN: 13

LVN (Modified Vars): test
    store i32 %a, ptr %a.addr, align 4
    => VN: 1
    store i32 %b, ptr %b.addr, align 4
    => VN: 2
    %0 = load i32, ptr %a.addr, align 4
    => VN: 1
    %1 = load i32, ptr %b.addr, align 4
    => VN: 2
    %add = add nsw i32 %0, %1
    => VN: 3
    store i32 %add, ptr %c, align 4
    => VN: 3
    %2 = load i32, ptr %b.addr, align 4
    => VN: 2
    %3 = load i32, ptr %c, align 4
    => VN: 3
    %add1 = add nsw i32 %2, %3
    => VN: 4
    store i32 %add1, ptr %d, align 4
    => VN: 4
    %4 = load i32, ptr %a.addr, align 4
    => VN: 1
    %5 = load i32, ptr %b.addr, align 4
    => VN: 2
    %add2 = add nsw i32 %4, %5
    => VN: 3 (redundant)
    store i32 %add2, ptr %e, align 4
    => VN: 3
    %6 = load i32, ptr %b.addr, align 4
    => VN: 2
    %7 = load i32, ptr %e, align 4
    => VN: 3
    %add3 = add nsw i32 %6, %7
    => VN: 4 (redundant)
    store i32 %add3, ptr %f, align 4
    => VN: 4
    %8 = load i32, ptr %f, align 4
    => VN: 4

LVN (Modified Vars): test1
    store i32 %a, ptr %a.addr, align 4
    => VN: 1
    store i32 %b, ptr %b.addr, align 4
    => VN: 2
    store i32 %c, ptr %c.addr, align 4
    => VN: 3
    store i32 %d, ptr %d.addr, align 4
    => VN: 4
    store i32 %e, ptr %e.addr, align 4
    => VN: 5
    store i32 %f, ptr %f.addr, align 4
    => VN: 6
    store i32 %g, ptr %g.addr, align 4
    => VN: 7
    %0 = load i32, ptr %a.addr, align 4
    => VN: 1
    %1 = load i32, ptr %b.addr, align 4
    => VN: 2
    %add = add nsw i32 %0, %1
    => VN: 8
    store i32 %add, ptr %c.addr, align 4
    => VN: 8
    %2 = load i32, ptr %c.addr, align 4
    => VN: 8
    %add1 = add nsw i32 %2, 5
    => VN: 10
    store i32 %add1, ptr %d.addr, align 4
    => VN: 10
    %3 = load i32, ptr %a.addr, align 4
    => VN: 1
    %4 = load i32, ptr %b.addr, align 4
    => VN: 2
    %add2 = add nsw i32 %3, %4
    => VN: 8 (redundant)
    store i32 %add2, ptr %e.addr, align 4
    => VN: 8
    %5 = load i32, ptr %e.addr, align 4
    => VN: 8
    %add3 = add nsw i32 %5, 5
    => VN: 10 (redundant)
    store i32 %add3, ptr %f.addr, align 4
    => VN: 10
    %6 = load i32, ptr %d.addr, align 4
    => VN: 10
    %7 = load i32, ptr %f.addr, align 4
    => VN: 10
    %add4 = add nsw i32 %6, %7
    => VN: 11
    store i32 %add4, ptr %g.addr, align 4
    => VN: 11

LVN (Modified Vars): test2
    store i32 %a, ptr %a.addr, align 4
    => VN: 1
    store i32 %b, ptr %b.addr, align 4
    => VN: 2
    store i32 %c, ptr %c.addr, align 4
    => VN: 3
    store i32 %x, ptr %x.addr, align 4
    => VN: 4
    store i32 %y, ptr %y.addr, align 4
    => VN: 5
    %0 = load i32, ptr %x.addr, align 4
    => VN: 4
    %1 = load i32, ptr %y.addr, align 4
    => VN: 5
    %add = add nsw i32 %0, %1
    => VN: 6
    store i32 %add, ptr %b.addr, align 4
    => VN: 6
    %2 = load i32, ptr %x.addr, align 4
    => VN: 4
    %3 = load i32, ptr %y.addr, align 4
    => VN: 5
    %add1 = add nsw i32 %2, %3
    => VN: 6 (redundant)
    store i32 %add1, ptr %a.addr, align 4
    => VN: 6
    store i32 17, ptr %a.addr, align 4
    => VN: 7
    %4 = load i32, ptr %x.addr, align 4
    => VN: 4
    %5 = load i32, ptr %y.addr, align 4
    => VN: 5
    %add2 = add nsw i32 %4, %5
    => VN: 6 (redundant)
    store i32 %add2, ptr %c.addr, align 4
    => VN: 6

LVN (Modified Vars): test3
    store i32 %a, ptr %a.addr, align 4
    => VN: 1
    store i32 %c, ptr %c.addr, align 4
    => VN: 2
    store i32 %d, ptr %d.addr, align 4
    => VN: 3
    store i32 %x, ptr %x.addr, align 4
    => VN: 4
    store i32 %y, ptr %y.addr, align 4
    => VN: 5
    store i32 %z, ptr %z.addr, align 4
    => VN: 6
    %0 = load i32, ptr %x.addr, align 4
    => VN: 4
    %1 = load i32, ptr %y.addr, align 4
    => VN: 5
    %add = add nsw i32 %0, %1
    => VN: 7
    store i32 %add, ptr %a.addr, align 4
    => VN: 7
    %2 = load i32, ptr %y.addr, align 4
    => VN: 5
    store i32 %2, ptr %z.addr, align 4
    => VN: 5
    store i32 17, ptr %d.addr, align 4
    => VN: 8
    %3 = load i32, ptr %x.addr, align 4
    => VN: 4
    %4 = load i32, ptr %z.addr, align 4
    => VN: 5
    %add1 = add nsw i32 %3, %4
    => VN: 7 (redundant)
    store i32 %add1, ptr %c.addr, align 4
    => VN: 7

LVN (Modified Vars): test4
    store i32 %a, ptr %a.addr, align 4
    => VN: 1
    store i32 %b, ptr %b.addr, align 4
    => VN: 2
    store i32 %c, ptr %c.addr, align 4
    => VN: 3
    store i32 %d, ptr %d.addr, align 4
    => VN: 4
    %0 = load i32, ptr %b.addr, align 4
    => VN: 2
    %1 = load i32, ptr %c.addr, align 4
    => VN: 3
    %add = add nsw i32 %0, %1
    => VN: 5
    store i32 %add, ptr %a.addr, align 4
    => VN: 5
    %2 = load i32, ptr %a.addr, align 4
    => VN: 5
    %3 = load i32, ptr %d.addr, align 4
    => VN: 4
    %sub = sub nsw i32 %2, %3
    => VN: 6
    store i32 %sub, ptr %b.addr, align 4
    => VN: 6
    %4 = load i32, ptr %b.addr, align 4
    => VN: 6
    %5 = load i32, ptr %c.addr, align 4
    => VN: 3
    %add1 = add nsw i32 %4, %5
    => VN: 7
    store i32 %add1, ptr %c.addr, align 4
    => VN: 7
    %6 = load i32, ptr %a.addr, align 4
    => VN: 5
    %7 = load i32, ptr %d.addr, align 4
    => VN: 4
    %sub2 = sub nsw i32 %6, %7
    => VN: 6 (redundant)
    store i32 %sub2, ptr %d.addr, align 4
    => VN: 6

LVN (Modified Vars): test5
    store i32 %a, ptr %a.addr, align 4
    => VN: 1
    store i32 %b, ptr %b.addr, align 4
    => VN: 2
    store i32 %c, ptr %c.addr, align 4
    => VN: 3
    store i32 %d, ptr %d.addr, align 4
    => VN: 4
    store i32 %e, ptr %e.addr, align 4
    => VN: 5
    %0 = load i32, ptr %b.addr, align 4
    => VN: 2
    %1 = load i32, ptr %c.addr, align 4
    => VN: 3
    %mul = mul nsw i32 %0, %1
    => VN: 6
    store i32 %mul, ptr %a.addr, align 4
    => VN: 6
    %2 = load i32, ptr %b.addr, align 4
    => VN: 2
    store i32 %2, ptr %d.addr, align 4
    => VN: 2
    %3 = load i32, ptr %a.addr, align 4
    => VN: 6
    %4 = load i32, ptr %b.addr, align 4
    => VN: 2
    %add = add nsw i32 %3, %4
    => VN: 7
    store i32 %add, ptr %c.addr, align 4
    => VN: 7
    %5 = load i32, ptr %d.addr, align 4
    => VN: 2
    %6 = load i32, ptr %c.addr, align 4
    => VN: 7
    %mul1 = mul nsw i32 %5, %6
    => VN: 8
    store i32 %mul1, ptr %e.addr, align 4
    => VN: 8
    %7 = load i32, ptr %c.addr, align 4
    => VN: 7
    %add2 = add nsw i32 %7, 5
    => VN: 10
    store i32 %add2, ptr %d.addr, align 4
    => VN: 10

LVN (Modified Vars): test6
    store i32 %c, ptr %c.addr, align 4
    => VN: 1
    store i32 %d, ptr %d.addr, align 4
    => VN: 2
    store i32 %e, ptr %e.addr, align 4
    => VN: 3
    store i32 %i, ptr %i.addr, align 4
    => VN: 4
    store i32 %j, ptr %j.addr, align 4
    => VN: 5
    store i32 10, ptr %a, align 4
    => VN: 6
    store i32 40, ptr %b, align 4
    => VN: 7
    %0 = load i32, ptr %i.addr, align 4
    => VN: 4
    %1 = load i32, ptr %j.addr, align 4
    => VN: 5
    %mul = mul nsw i32 %0, %1
    => VN: 8
    store i32 %mul, ptr %t1, align 4
    => VN: 8
    %2 = load i32, ptr %t1, align 4
    => VN: 8
    %add = add nsw i32 %2, 40
    => VN: 9
    store i32 %add, ptr %c.addr, align 4
    => VN: 9
    store i32 150, ptr %t2, align 4
    => VN: 10
    %3 = load i32, ptr %c.addr, align 4
    => VN: 9
    %mul1 = mul nsw i32 150, %3
    => VN: 11
    store i32 %mul1, ptr %d.addr, align 4
    => VN: 11
    %4 = load i32, ptr %i.addr, align 4
    => VN: 4
    store i32 %4, ptr %e.addr, align 4
    => VN: 4
    %5 = load i32, ptr %i.addr, align 4
    => VN: 4
    %6 = load i32, ptr %j.addr, align 4
    => VN: 5
    %mul2 = mul nsw i32 %5, %6
    => VN: 8 (redundant)
    store i32 %mul2, ptr %t3, align 4
    => VN: 8
    %7 = load i32, ptr %i.addr, align 4
    => VN: 4
    %mul3 = mul nsw i32 %7, 10
    => VN: 12
    store i32 %mul3, ptr %t4, align 4
    => VN: 12
    %8 = load i32, ptr %t1, align 4
    => VN: 8
    %9 = load i32, ptr %t4, align 4
    => VN: 12
    %add4 = add nsw i32 %8, %9
    => VN: 13
    store i32 %add4, ptr %c.addr, align 4
    => VN: 13

ValueNumbering: test
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %b, ptr %b.addr, align 4               2 = 2
    %0 = load i32, ptr %a.addr, align 4              1 = 1
    %1 = load i32, ptr %b.addr, align 4              2 = 2
    %add = add nsw i32 %0, %1                        3 = 1 add 2
    store i32 %add, ptr %c, align 4                  3 = 3
    %2 = load i32, ptr %b.addr, align 4              2 = 2
    %3 = load i32, ptr %c, align 4                   3 = 3
    %add1 = add nsw i32 %2, %3                       4 = 2 add 3
    store i32 %add1, ptr %d, align 4                 4 = 4
    %4 = load i32, ptr %a.addr, align 4              1 = 1
    %5 = load i32, ptr %b.addr, align 4              2 = 2
    %add2 = add nsw i32 %4, %5                       3 = 1 add 2 (redundant)
    store i32 %add2, ptr %e, align 4                 3 = 3
    %6 = load i32, ptr %b.addr, align 4              2 = 2
    %7 = load i32, ptr %e, align 4                   3 = 3
    %add3 = add nsw i32 %6, %7                       4 = 2 add 3 (redundant)
    store i32 %add3, ptr %f, align 4                 4 = 4
    %8 = load i32, ptr %f, align 4                   4 = 4

ValueNumbering: test1
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %b, ptr %b.addr, align 4               2 = 2
    store i32 %c, ptr %c.addr, align 4               3 = 3
    store i32 %d, ptr %d.addr, align 4               4 = 4
    store i32 %e, ptr %e.addr, align 4               5 = 5
    store i32 %f, ptr %f.addr, align 4               6 = 6
    store i32 %g, ptr %g.addr, align 4               7 = 7
    %0 = load i32, ptr %a.addr, align 4              1 = 1
    %1 = load i32, ptr %b.addr, align 4              2 = 2
    %add = add nsw i32 %0, %1                        8 = 1 add 2
    store i32 %add, ptr %c.addr, align 4             8 = 8
    %2 = load i32, ptr %c.addr, align 4              8 = 8
    %add1 = add nsw i32 %2, 5                        10 = 8 add 9
    store i32 %add1, ptr %d.addr, align 4            10 = 10
    %3 = load i32, ptr %a.addr, align 4              1 = 1
    %4 = load i32, ptr %b.addr, align 4              2 = 2
    %add2 = add nsw i32 %3, %4                       8 = 1 add 2 (redundant)
    store i32 %add2, ptr %e.addr, align 4            8 = 8
    %5 = load i32, ptr %e.addr, align 4              8 = 8
    %add3 = add nsw i32 %5, 5                        10 = 8 add 9 (redundant)
    store i32 %add3, ptr %f.addr, align 4            10 = 10
    %6 = load i32, ptr %d.addr, align 4              10 = 10
    %7 = load i32, ptr %f.addr, align 4              10 = 10
    %add4 = add nsw i32 %6, %7                       11 = 10 add 10
    store i32 %add4, ptr %g.addr, align 4            11 = 11

ValueNumbering: test2
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %b, ptr %b.addr, align 4               2 = 2
    store i32 %c, ptr %c.addr, align 4               3 = 3
    store i32 %x, ptr %x.addr, align 4               4 = 4
    store i32 %y, ptr %y.addr, align 4               5 = 5
    %0 = load i32, ptr %x.addr, align 4              4 = 4
    %1 = load i32, ptr %y.addr, align 4              5 = 5
    %add = add nsw i32 %0, %1                        6 = 4 add 5
    store i32 %add, ptr %b.addr, align 4             6 = 6
    %2 = load i32, ptr %x.addr, align 4              4 = 4
    %3 = load i32, ptr %y.addr, align 4              5 = 5
    %add1 = add nsw i32 %2, %3                       6 = 4 add 5 (redundant)
    store i32 %add1, ptr %a.addr, align 4            6 = 6
    store i32 17, ptr %a.addr, align 4               7 = 7
    %4 = load i32, ptr %x.addr, align 4              4 = 4
    %5 = load i32, ptr %y.addr, align 4              5 = 5
    %add2 = add nsw i32 %4, %5                       6 = 4 add 5 (redundant)
    store i32 %add2, ptr %c.addr, align 4            6 = 6

ValueNumbering: test3
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %c, ptr %c.addr, align 4               2 = 2
    store i32 %d, ptr %d.addr, align 4               3 = 3
    store i32 %x, ptr %x.addr, align 4               4 = 4
    store i32 %y, ptr %y.addr, align 4               5 = 5
    store i32 %z, ptr %z.addr, align 4               6 = 6
    %0 = load i32, ptr %x.addr, align 4              4 = 4
    %1 = load i32, ptr %y.addr, align 4              5 = 5
    %add = add nsw i32 %0, %1                        7 = 4 add 5
    store i32 %add, ptr %a.addr, align 4             7 = 7
    %2 = load i32, ptr %y.addr, align 4              5 = 5
    store i32 %2, ptr %z.addr, align 4               5 = 5
    store i32 17, ptr %d.addr, align 4               8 = 8
    %3 = load i32, ptr %x.addr, align 4              4 = 4
    %4 = load i32, ptr %z.addr, align 4              5 = 5
    %add1 = add nsw i32 %3, %4                       7 = 4 add 5 (redundant)
    store i32 %add1, ptr %c.addr, align 4            7 = 7

ValueNumbering: test4
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %b, ptr %b.addr, align 4               2 = 2
    store i32 %c, ptr %c.addr, align 4               3 = 3
    store i32 %d, ptr %d.addr, align 4               4 = 4
    %0 = load i32, ptr %b.addr, align 4              2 = 2
    %1 = load i32, ptr %c.addr, align 4              3 = 3
    %add = add nsw i32 %0, %1                        5 = 2 add 3
    store i32 %add, ptr %a.addr, align 4             5 = 5
    %2 = load i32, ptr %a.addr, align 4              5 = 5
    %3 = load i32, ptr %d.addr, align 4              4 = 4
    %sub = sub nsw i32 %2, %3                        6 = 5 sub 4
    store i32 %sub, ptr %b.addr, align 4             6 = 6
    %4 = load i32, ptr %b.addr, align 4              6 = 6
    %5 = load i32, ptr %c.addr, align 4              3 = 3
    %add1 = add nsw i32 %4, %5                       7 = 6 add 3
    store i32 %add1, ptr %c.addr, align 4            7 = 7
    %6 = load i32, ptr %a.addr, align 4              5 = 5
    %7 = load i32, ptr %d.addr, align 4              4 = 4
    %sub2 = sub nsw i32 %6, %7                       6 = 5 sub 4 (redundant)
    store i32 %sub2, ptr %d.addr, align 4            6 = 6

ValueNumbering: test5
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %b, ptr %b.addr, align 4               2 = 2
    store i32 %c, ptr %c.addr, align 4               3 = 3
    store i32 %d, ptr %d.addr, align 4               4 = 4
    store i32 %e, ptr %e.addr, align 4               5 = 5
    %0 = load i32, ptr %b.addr, align 4              2 = 2
    %1 = load i32, ptr %c.addr, align 4              3 = 3
    %mul = mul nsw i32 %0, %1                        6 = 2 mul 3
    store i32 %mul, ptr %a.addr, align 4             6 = 6
    %2 = load i32, ptr %b.addr, align 4              2 = 2
    store i32 %2, ptr %d.addr, align 4               2 = 2
    %3 = load i32, ptr %a.addr, align 4              6 = 6
    %4 = load i32, ptr %b.addr, align 4              2 = 2
    %add = add nsw i32 %3, %4                        7 = 6 add 2
    store i32 %add, ptr %c.addr, align 4             7 = 7
    %5 = load i32, ptr %d.addr, align 4              2 = 2
    %6 = load i32, ptr %c.addr, align 4              7 = 7
    %mul1 = mul nsw i32 %5, %6                       8 = 2 mul 7
    store i32 %mul1, ptr %e.addr, align 4            8 = 8
    %7 = load i32, ptr %c.addr, align 4              7 = 7
    %add2 = add nsw i32 %7, 5                        10 = 7 add 9
    store i32 %add2, ptr %d.addr, align 4            10 = 10

ValueNumbering: test6
    store i32 %c, ptr %c.addr, align 4               1 = 1
    store i32 %d, ptr %d.addr, align 4               2 = 2
    store i32 %e, ptr %e.addr, align 4               3 = 3
    store i32 %i, ptr %i.addr, align 4               4 = 4
    store i32 %j, ptr %j.addr, align 4               5 = 5
    store i32 10, ptr %a, align 4                    6 = 6
    store i32 40, ptr %b, align 4                    7 = 7
    %0 = load i32, ptr %i.addr, align 4              4 = 4
    %1 = load i32, ptr %j.addr, align 4              5 = 5
    %mul = mul nsw i32 %0, %1                        8 = 4 mul 5
    store i32 %mul, ptr %t1, align 4                 8 = 8
    %2 = load i32, ptr %t1, align 4                  8 = 8
    %add = add nsw i32 %2, 40                        9 = 8 add 7
    store i32 %add, ptr %c.addr, align 4             9 = 9
    store i32 150, ptr %t2, align 4                  10 = 10
    %3 = load i32, ptr %c.addr, align 4              9 = 9
    %mul1 = mul nsw i32 150, %3                      11 = 10 mul 9
    store i32 %mul1, ptr %d.addr, align 4            11 = 11
    %4 = load i32, ptr %i.addr, align 4              4 = 4
    store i32 %4, ptr %e.addr, align 4               4 = 4
    %5 = load i32, ptr %i.addr, align 4              4 = 4
    %6 = load i32, ptr %j.addr, align 4              5 = 5
    %mul2 = mul nsw i32 %5, %6                       8 = 4 mul 5 (redundant)
    store i32 %mul2, ptr %t3, align 4                8 = 8
    %7 = load i32, ptr %i.addr, align 4              4 = 4
    %mul3 = mul nsw i32 %7, 10                       12 = 4 mul 6
    store i32 %mul3, ptr %t4, align 4                12 = 12
    %8 = load i32, ptr %t1, align 4                  8 = 8
    %9 = load i32, ptr %t4, align 4                  12 = 12
    %add4 = add nsw i32 %8, %9                       13 = 8 add 12
    store i32 %add4, ptr %c.addr, align 4            13 = 13

ValueNumbering: test
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %b, ptr %b.addr, align 4               2 = 2
    %0 = load i32, ptr %a.addr, align 4              1 = 1
    %1 = load i32, ptr %b.addr, align 4              2 = 2
    %add = add nsw i32 %0, %1                        3 = 1 add 2
    store i32 %add, ptr %c, align 4                  3 = 3
    %2 = load i32, ptr %b.addr, align 4              2 = 2
    %3 = load i32, ptr %c, align 4                   3 = 3
    %add1 = add nsw i32 %2, %3                       4 = 2 add 3
    store i32 %add1, ptr %d, align 4                 4 = 4
    %4 = load i32, ptr %a.addr, align 4              1 = 1
    %5 = load i32, ptr %b.addr, align 4              2 = 2
    %add2 = add nsw i32 %4, %5                       3 = 1 add 2 (redundant)
    store i32 %add2, ptr %e, align 4                 3 = 3
    %6 = load i32, ptr %b.addr, align 4              2 = 2
    %7 = load i32, ptr %e, align 4                   3 = 3
    %add3 = add nsw i32 %6, %7                       4 = 2 add 3 (redundant)
    store i32 %add3, ptr %f, align 4                 4 = 4
    %8 = load i32, ptr %f, align 4                   4 = 4

ValueNumbering: test1
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %b, ptr %b.addr, align 4               2 = 2
    store i32 %c, ptr %c.addr, align 4               3 = 3
    store i32 %d, ptr %d.addr, align 4               4 = 4
    store i32 %e, ptr %e.addr, align 4               5 = 5
    store i32 %f, ptr %f.addr, align 4               6 = 6
    store i32 %g, ptr %g.addr, align 4               7 = 7
    %0 = load i32, ptr %a.addr, align 4              1 = 1
    %1 = load i32, ptr %b.addr, align 4              2 = 2
    %add = add nsw i32 %0, %1                        8 = 1 add 2
    store i32 %add, ptr %c.addr, align 4             8 = 8
    %2 = load i32, ptr %c.addr, align 4              8 = 8
    %add1 = add nsw i32 %2, 5                        10 = 8 add 9
    store i32 %add1, ptr %d.addr, align 4            10 = 10
    %3 = load i32, ptr %a.addr, align 4              1 = 1
    %4 = load i32, ptr %b.addr, align 4              2 = 2
    %add2 = add nsw i32 %3, %4                       8 = 1 add 2 (redundant)
    store i32 %add2, ptr %e.addr, align 4            8 = 8
    %5 = load i32, ptr %e.addr, align 4              8 = 8
    %add3 = add nsw i32 %5, 5                        10 = 8 add 9 (redundant)
    store i32 %add3, ptr %f.addr, align 4            10 = 10
    %6 = load i32, ptr %d.addr, align 4              10 = 10
    %7 = load i32, ptr %f.addr, align 4              10 = 10
    %add4 = add nsw i32 %6, %7                       11 = 10 add 10
    store i32 %add4, ptr %g.addr, align 4            11 = 11

ValueNumbering: test2
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %b, ptr %b.addr, align 4               2 = 2
    store i32 %c, ptr %c.addr, align 4               3 = 3
    store i32 %x, ptr %x.addr, align 4               4 = 4
    store i32 %y, ptr %y.addr, align 4               5 = 5
    %0 = load i32, ptr %x.addr, align 4              4 = 4
    %1 = load i32, ptr %y.addr, align 4              5 = 5
    %add = add nsw i32 %0, %1                        6 = 4 add 5
    store i32 %add, ptr %b.addr, align 4             6 = 6
    %2 = load i32, ptr %x.addr, align 4              4 = 4
    %3 = load i32, ptr %y.addr, align 4              5 = 5
    %add1 = add nsw i32 %2, %3                       6 = 4 add 5 (redundant)
    store i32 %add1, ptr %a.addr, align 4            6 = 6
    store i32 17, ptr %a.addr, align 4               7 = 7
    %4 = load i32, ptr %x.addr, align 4              4 = 4
    %5 = load i32, ptr %y.addr, align 4              5 = 5
    %add2 = add nsw i32 %4, %5                       6 = 4 add 5 (redundant)
    store i32 %add2, ptr %c.addr, align 4            6 = 6

ValueNumbering: test3
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %c, ptr %c.addr, align 4               2 = 2
    store i32 %d, ptr %d.addr, align 4               3 = 3
    store i32 %x, ptr %x.addr, align 4               4 = 4
    store i32 %y, ptr %y.addr, align 4               5 = 5
    store i32 %z, ptr %z.addr, align 4               6 = 6
    %0 = load i32, ptr %x.addr, align 4              4 = 4
    %1 = load i32, ptr %y.addr, align 4              5 = 5
    %add = add nsw i32 %0, %1                        7 = 4 add 5
    store i32 %add, ptr %a.addr, align 4             7 = 7
    %2 = load i32, ptr %y.addr, align 4              5 = 5
    store i32 %2, ptr %z.addr, align 4               5 = 5
    store i32 17, ptr %d.addr, align 4               8 = 8
    %3 = load i32, ptr %x.addr, align 4              4 = 4
    %4 = load i32, ptr %z.addr, align 4              5 = 5
    %add1 = add nsw i32 %3, %4                       7 = 4 add 5 (redundant)
    store i32 %add1, ptr %c.addr, align 4            7 = 7

ValueNumbering: test4
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %b, ptr %b.addr, align 4               2 = 2
    store i32 %c, ptr %c.addr, align 4               3 = 3
    store i32 %d, ptr %d.addr, align 4               4 = 4
    %0 = load i32, ptr %b.addr, align 4              2 = 2
    %1 = load i32, ptr %c.addr, align 4              3 = 3
    %add = add nsw i32 %0, %1                        5 = 2 add 3
    store i32 %add, ptr %a.addr, align 4             5 = 5
    %2 = load i32, ptr %a.addr, align 4              5 = 5
    %3 = load i32, ptr %d.addr, align 4              4 = 4
    %sub = sub nsw i32 %2, %3                        6 = 5 sub 4
    store i32 %sub, ptr %b.addr, align 4             6 = 6
    %4 = load i32, ptr %b.addr, align 4              6 = 6
    %5 = load i32, ptr %c.addr, align 4              3 = 3
    %add1 = add nsw i32 %4, %5                       7 = 6 add 3
    store i32 %add1, ptr %c.addr, align 4            7 = 7
    %6 = load i32, ptr %a.addr, align 4              5 = 5
    %7 = load i32, ptr %d.addr, align 4              4 = 4
    %sub2 = sub nsw i32 %6, %7                       6 = 5 sub 4 (redundant)
    store i32 %sub2, ptr %d.addr, align 4            6 = 6

ValueNumbering: test5
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %b, ptr %b.addr, align 4               2 = 2
    store i32 %c, ptr %c.addr, align 4               3 = 3
    store i32 %d, ptr %d.addr, align 4               4 = 4
    store i32 %e, ptr %e.addr, align 4               5 = 5
    %0 = load i32, ptr %b.addr, align 4              2 = 2
    %1 = load i32, ptr %c.addr, align 4              3 = 3
    %mul = mul nsw i32 %0, %1                        6 = 2 mul 3
    store i32 %mul, ptr %a.addr, align 4             6 = 6
    %2 = load i32, ptr %b.addr, align 4              2 = 2
    store i32 %2, ptr %d.addr, align 4               2 = 2
    %3 = load i32, ptr %a.addr, align 4              6 = 6
    %4 = load i32, ptr %b.addr, align 4              2 = 2
    %add = add nsw i32 %3, %4                        7 = 6 add 2
    store i32 %add, ptr %c.addr, align 4             7 = 7
    %5 = load i32, ptr %d.addr, align 4              2 = 2
    %6 = load i32, ptr %c.addr, align 4              7 = 7
    %mul1 = mul nsw i32 %5, %6                       8 = 2 mul 7
    store i32 %mul1, ptr %e.addr, align 4            8 = 8
    %7 = load i32, ptr %c.addr, align 4              7 = 7
    %add2 = add nsw i32 %7, 5                        10 = 7 add 9
    store i32 %add2, ptr %d.addr, align 4            10 = 10

ValueNumbering: test6
    store i32 %c, ptr %c.addr, align 4               1 = 1
    store i32 %d, ptr %d.addr, align 4               2 = 2
    store i32 %e, ptr %e.addr, align 4               3 = 3
    store i32 %i, ptr %i.addr, align 4               4 = 4
    store i32 %j, ptr %j.addr, align 4               5 = 5
    store i32 10, ptr %a, align 4                    6 = 6
    store i32 40, ptr %b, align 4                    7 = 7
    %0 = load i32, ptr %i.addr, align 4              4 = 4
    %1 = load i32, ptr %j.addr, align 4              5 = 5
    %mul = mul nsw i32 %0, %1                        8 = 4 mul 5
    store i32 %mul, ptr %t1, align 4                 8 = 8
    %2 = load i32, ptr %t1, align 4                  8 = 8
    %add = add nsw i32 %2, 40                        9 = 8 add 7
    store i32 %add, ptr %c.addr, align 4             9 = 9
    store i32 150, ptr %t2, align 4                  10 = 10
    %3 = load i32, ptr %c.addr, align 4              9 = 9
    %mul1 = mul nsw i32 150, %3                      11 = 10 mul 9
    store i32 %mul1, ptr %d.addr, align 4            11 = 11
    %4 = load i32, ptr %i.addr, align 4              4 = 4
    store i32 %4, ptr %e.addr, align 4               4 = 4
    %5 = load i32, ptr %i.addr, align 4              4 = 4
    %6 = load i32, ptr %j.addr, align 4              5 = 5
    %mul2 = mul nsw i32 %5, %6                       8 = 4 mul 5 (redundant)
    store i32 %mul2, ptr %t3, align 4                8 = 8
    %7 = load i32, ptr %i.addr, align 4              4 = 4
    %mul3 = mul nsw i32 %7, 10                       12 = 4 mul 6
    store i32 %mul3, ptr %t4, align 4                12 = 12
    %8 = load i32, ptr %t1, align 4                  8 = 8
    %9 = load i32, ptr %t4, align 4                  12 = 12
    %add4 = add nsw i32 %8, %9                       13 = 8 add 12
    store i32 %add4, ptr %c.addr, align 4            13 = 13

ValueNumbering: test
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %b, ptr %b.addr, align 4               2 = 2
    %0 = load i32, ptr %a.addr, align 4              1 = 1
    %1 = load i32, ptr %b.addr, align 4              2 = 2
    %add = add nsw i32 %0, %1                        3 = 1 add 2
    store i32 %add, ptr %c, align 4                  3 = 3
    %2 = load i32, ptr %b.addr, align 4              2 = 2
    %3 = load i32, ptr %c, align 4                   3 = 3
    %add1 = add nsw i32 %2, %3                       4 = 2 add 3
    store i32 %add1, ptr %d, align 4                 4 = 4
    %4 = load i32, ptr %a.addr, align 4              1 = 1
    %5 = load i32, ptr %b.addr, align 4              2 = 2
    %add2 = add nsw i32 %4, %5                       3 = 1 add 2 (redundant)
    store i32 %add2, ptr %e, align 4                 3 = 3
    %6 = load i32, ptr %b.addr, align 4              2 = 2
    %7 = load i32, ptr %e, align 4                   3 = 3
    %add3 = add nsw i32 %6, %7                       4 = 2 add 3 (redundant)
    store i32 %add3, ptr %f, align 4                 4 = 4
    %8 = load i32, ptr %f, align 4                   4 = 4

ValueNumbering: test1
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %b, ptr %b.addr, align 4               2 = 2
    store i32 %c, ptr %c.addr, align 4               3 = 3
    store i32 %d, ptr %d.addr, align 4               4 = 4
    store i32 %e, ptr %e.addr, align 4               5 = 5
    store i32 %f, ptr %f.addr, align 4               6 = 6
    store i32 %g, ptr %g.addr, align 4               7 = 7
    %0 = load i32, ptr %a.addr, align 4              1 = 1
    %1 = load i32, ptr %b.addr, align 4              2 = 2
    %add = add nsw i32 %0, %1                        8 = 1 add 2
    store i32 %add, ptr %c.addr, align 4             8 = 8
    %2 = load i32, ptr %c.addr, align 4              8 = 8
    %add1 = add nsw i32 %2, 5                        10 = 8 add 9
    store i32 %add1, ptr %d.addr, align 4            10 = 10
    %3 = load i32, ptr %a.addr, align 4              1 = 1
    %4 = load i32, ptr %b.addr, align 4              2 = 2
    %add2 = add nsw i32 %3, %4                       8 = 1 add 2 (redundant)
    store i32 %add2, ptr %e.addr, align 4            8 = 8
    %5 = load i32, ptr %e.addr, align 4              8 = 8
    %add3 = add nsw i32 %5, 5                        10 = 8 add 9 (redundant)
    store i32 %add3, ptr %f.addr, align 4            10 = 10
    %6 = load i32, ptr %d.addr, align 4              10 = 10
    %7 = load i32, ptr %f.addr, align 4              10 = 10
    %add4 = add nsw i32 %6, %7                       11 = 10 add 10
    store i32 %add4, ptr %g.addr, align 4            11 = 11

ValueNumbering: test2
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %b, ptr %b.addr, align 4               2 = 2
    store i32 %c, ptr %c.addr, align 4               3 = 3
    store i32 %x, ptr %x.addr, align 4               4 = 4
    store i32 %y, ptr %y.addr, align 4               5 = 5
    %0 = load i32, ptr %x.addr, align 4              4 = 4
    %1 = load i32, ptr %y.addr, align 4              5 = 5
    %add = add nsw i32 %0, %1                        6 = 4 add 5
    store i32 %add, ptr %b.addr, align 4             6 = 6
    %2 = load i32, ptr %x.addr, align 4              4 = 4
    %3 = load i32, ptr %y.addr, align 4              5 = 5
    %add1 = add nsw i32 %2, %3                       6 = 4 add 5 (redundant)
    store i32 %add1, ptr %a.addr, align 4            6 = 6
    store i32 17, ptr %a.addr, align 4               7 = 7
    %4 = load i32, ptr %x.addr, align 4              4 = 4
    %5 = load i32, ptr %y.addr, align 4              5 = 5
    %add2 = add nsw i32 %4, %5                       6 = 4 add 5 (redundant)
    store i32 %add2, ptr %c.addr, align 4            6 = 6

ValueNumbering: test3
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %c, ptr %c.addr, align 4               2 = 2
    store i32 %d, ptr %d.addr, align 4               3 = 3
    store i32 %x, ptr %x.addr, align 4               4 = 4
    store i32 %y, ptr %y.addr, align 4               5 = 5
    store i32 %z, ptr %z.addr, align 4               6 = 6
    %0 = load i32, ptr %x.addr, align 4              4 = 4
    %1 = load i32, ptr %y.addr, align 4              5 = 5
    %add = add nsw i32 %0, %1                        7 = 4 add 5
    store i32 %add, ptr %a.addr, align 4             7 = 7
    %2 = load i32, ptr %y.addr, align 4              5 = 5
    store i32 %2, ptr %z.addr, align 4               5 = 5
    store i32 17, ptr %d.addr, align 4               8 = 8
    %3 = load i32, ptr %x.addr, align 4              4 = 4
    %4 = load i32, ptr %z.addr, align 4              5 = 5
    %add1 = add nsw i32 %3, %4                       7 = 4 add 5 (redundant)
    store i32 %add1, ptr %c.addr, align 4            7 = 7

ValueNumbering: test4
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %b, ptr %b.addr, align 4               2 = 2
    store i32 %c, ptr %c.addr, align 4               3 = 3
    store i32 %d, ptr %d.addr, align 4               4 = 4
    %0 = load i32, ptr %b.addr, align 4              2 = 2
    %1 = load i32, ptr %c.addr, align 4              3 = 3
    %add = add nsw i32 %0, %1                        5 = 2 add 3
    store i32 %add, ptr %a.addr, align 4             5 = 5
    %2 = load i32, ptr %a.addr, align 4              5 = 5
    %3 = load i32, ptr %d.addr, align 4              4 = 4
    %sub = sub nsw i32 %2, %3                        6 = 5 sub 4
    store i32 %sub, ptr %b.addr, align 4             6 = 6
    %4 = load i32, ptr %b.addr, align 4              6 = 6
    %5 = load i32, ptr %c.addr, align 4              3 = 3
    %add1 = add nsw i32 %4, %5                       7 = 6 add 3
    store i32 %add1, ptr %c.addr, align 4            7 = 7
    %6 = load i32, ptr %a.addr, align 4              5 = 5
    %7 = load i32, ptr %d.addr, align 4              4 = 4
    %sub2 = sub nsw i32 %6, %7                       6 = 5 sub 4 (redundant)
    store i32 %sub2, ptr %d.addr, align 4            6 = 6

ValueNumbering: test5
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %b, ptr %b.addr, align 4               2 = 2
    store i32 %c, ptr %c.addr, align 4               3 = 3
    store i32 %d, ptr %d.addr, align 4               4 = 4
    store i32 %e, ptr %e.addr, align 4               5 = 5
    %0 = load i32, ptr %b.addr, align 4              2 = 2
    %1 = load i32, ptr %c.addr, align 4              3 = 3
    %mul = mul nsw i32 %0, %1                        6 = 2 mul 3
    store i32 %mul, ptr %a.addr, align 4             6 = 6
    %2 = load i32, ptr %b.addr, align 4              2 = 2
    store i32 %2, ptr %d.addr, align 4               2 = 2
    %3 = load i32, ptr %a.addr, align 4              6 = 6
    %4 = load i32, ptr %b.addr, align 4              2 = 2
    %add = add nsw i32 %3, %4                        7 = 6 add 2
    store i32 %add, ptr %c.addr, align 4             7 = 7
    %5 = load i32, ptr %d.addr, align 4              2 = 2
    %6 = load i32, ptr %c.addr, align 4              7 = 7
    %mul1 = mul nsw i32 %5, %6                       8 = 2 mul 7
    store i32 %mul1, ptr %e.addr, align 4            8 = 8
    %7 = load i32, ptr %c.addr, align 4              7 = 7
    %add2 = add nsw i32 %7, 5                        10 = 7 add 9
    store i32 %add2, ptr %d.addr, align 4            10 = 10

ValueNumbering: test6
    store i32 %c, ptr %c.addr, align 4               1 = 1
    store i32 %d, ptr %d.addr, align 4               2 = 2
    store i32 %e, ptr %e.addr, align 4               3 = 3
    store i32 %i, ptr %i.addr, align 4               4 = 4
    store i32 %j, ptr %j.addr, align 4               5 = 5
    store i32 10, ptr %a, align 4                    6 = 6
    store i32 40, ptr %b, align 4                    7 = 7
    %0 = load i32, ptr %i.addr, align 4              4 = 4
    %1 = load i32, ptr %j.addr, align 4              5 = 5
    %mul = mul nsw i32 %0, %1                        8 = 4 mul 5
    store i32 %mul, ptr %t1, align 4                 8 = 8
    %2 = load i32, ptr %t1, align 4                  8 = 8
    %add = add nsw i32 %2, 40                        9 = 8 add 7
    store i32 %add, ptr %c.addr, align 4             9 = 9
    store i32 150, ptr %t2, align 4                  10 = 10
    %3 = load i32, ptr %c.addr, align 4              9 = 9
    %mul1 = mul nsw i32 150, %3                      11 = 10 mul 9
    store i32 %mul1, ptr %d.addr, align 4            11 = 11
    %4 = load i32, ptr %i.addr, align 4              4 = 4
    store i32 %4, ptr %e.addr, align 4               4 = 4
    %5 = load i32, ptr %i.addr, align 4              4 = 4
    %6 = load i32, ptr %j.addr, align 4              5 = 5
    %mul2 = mul nsw i32 %5, %6                       8 = 4 mul 5 (redundant)
    store i32 %mul2, ptr %t3, align 4                8 = 8
    %7 = load i32, ptr %i.addr, align 4              4 = 4
    %mul3 = mul nsw i32 %7, 10                       12 = 4 mul 6
    store i32 %mul3, ptr %t4, align 4                12 = 12
    %8 = load i32, ptr %t1, align 4                  8 = 8
    %9 = load i32, ptr %t4, align 4                  12 = 12
    %add4 = add nsw i32 %8, %9                       13 = 8 add 12
    store i32 %add4, ptr %c.addr, align 4            13 = 13

ValueNumbering: test
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %b, ptr %b.addr, align 4               2 = 2
    %0 = load i32, ptr %a.addr, align 4              1 = 1
    %1 = load i32, ptr %b.addr, align 4              2 = 2
    %add = add nsw i32 %0, %1                        3 = 1 add 2
    store i32 %add, ptr %c, align 4                  3 = 3
    %2 = load i32, ptr %b.addr, align 4              2 = 2
    %3 = load i32, ptr %c, align 4                   3 = 3
    %add1 = add nsw i32 %2, %3                       4 = 2 add 3
    store i32 %add1, ptr %d, align 4                 4 = 4
    %4 = load i32, ptr %a.addr, align 4              1 = 1
    %5 = load i32, ptr %b.addr, align 4              2 = 2
    %add2 = add nsw i32 %4, %5                       3 = 1 add 2 (redundant)
    store i32 %add2, ptr %e, align 4                 3 = 3
    %6 = load i32, ptr %b.addr, align 4              2 = 2
    %7 = load i32, ptr %e, align 4                   3 = 3
    %add3 = add nsw i32 %6, %7                       4 = 2 add 3 (redundant)
    store i32 %add3, ptr %f, align 4                 4 = 4
    %8 = load i32, ptr %f, align 4                   4 = 4

ValueNumbering: test1
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %b, ptr %b.addr, align 4               2 = 2
    store i32 %c, ptr %c.addr, align 4               3 = 3
    store i32 %d, ptr %d.addr, align 4               4 = 4
    store i32 %e, ptr %e.addr, align 4               5 = 5
    store i32 %f, ptr %f.addr, align 4               6 = 6
    store i32 %g, ptr %g.addr, align 4               7 = 7
    %0 = load i32, ptr %a.addr, align 4              1 = 1
    %1 = load i32, ptr %b.addr, align 4              2 = 2
    %add = add nsw i32 %0, %1                        8 = 1 add 2
    store i32 %add, ptr %c.addr, align 4             8 = 8
    %2 = load i32, ptr %c.addr, align 4              8 = 8
    %add1 = add nsw i32 %2, 5                        10 = 8 add 9
    store i32 %add1, ptr %d.addr, align 4            10 = 10
    %3 = load i32, ptr %a.addr, align 4              1 = 1
    %4 = load i32, ptr %b.addr, align 4              2 = 2
    %add2 = add nsw i32 %3, %4                       8 = 1 add 2 (redundant)
    store i32 %add2, ptr %e.addr, align 4            8 = 8
    %5 = load i32, ptr %e.addr, align 4              8 = 8
    %add3 = add nsw i32 %5, 5                        10 = 8 add 9 (redundant)
    store i32 %add3, ptr %f.addr, align 4            10 = 10
    %6 = load i32, ptr %d.addr, align 4              10 = 10
    %7 = load i32, ptr %f.addr, align 4              10 = 10
    %add4 = add nsw i32 %6, %7                       11 = 10 add 10
    store i32 %add4, ptr %g.addr, align 4            11 = 11

ValueNumbering: test2
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %b, ptr %b.addr, align 4               2 = 2
    store i32 %c, ptr %c.addr, align 4               3 = 3
    store i32 %x, ptr %x.addr, align 4               4 = 4
    store i32 %y, ptr %y.addr, align 4               5 = 5
    %0 = load i32, ptr %x.addr, align 4              4 = 4
    %1 = load i32, ptr %y.addr, align 4              5 = 5
    %add = add nsw i32 %0, %1                        6 = 4 add 5
    store i32 %add, ptr %b.addr, align 4             6 = 6
    %2 = load i32, ptr %x.addr, align 4              4 = 4
    %3 = load i32, ptr %y.addr, align 4              5 = 5
    %add1 = add nsw i32 %2, %3                       6 = 4 add 5 (redundant)
    store i32 %add1, ptr %a.addr, align 4            6 = 6
    store i32 17, ptr %a.addr, align 4               7 = 7
    %4 = load i32, ptr %x.addr, align 4              4 = 4
    %5 = load i32, ptr %y.addr, align 4              5 = 5
    %add2 = add nsw i32 %4, %5                       6 = 4 add 5 (redundant)
    store i32 %add2, ptr %c.addr, align 4            6 = 6

ValueNumbering: test3
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %c, ptr %c.addr, align 4               2 = 2
    store i32 %d, ptr %d.addr, align 4               3 = 3
    store i32 %x, ptr %x.addr, align 4               4 = 4
    store i32 %y, ptr %y.addr, align 4               5 = 5
    store i32 %z, ptr %z.addr, align 4               6 = 6
    %0 = load i32, ptr %x.addr, align 4              4 = 4
    %1 = load i32, ptr %y.addr, align 4              5 = 5
    %add = add nsw i32 %0, %1                        7 = 4 add 5
    store i32 %add, ptr %a.addr, align 4             7 = 7
    %2 = load i32, ptr %y.addr, align 4              5 = 5
    store i32 %2, ptr %z.addr, align 4               5 = 5
    store i32 17, ptr %d.addr, align 4               8 = 8
    %3 = load i32, ptr %x.addr, align 4              4 = 4
    %4 = load i32, ptr %z.addr, align 4              5 = 5
    %add1 = add nsw i32 %3, %4                       7 = 4 add 5 (redundant)
    store i32 %add1, ptr %c.addr, align 4            7 = 7

ValueNumbering: test4
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %b, ptr %b.addr, align 4               2 = 2
    store i32 %c, ptr %c.addr, align 4               3 = 3
    store i32 %d, ptr %d.addr, align 4               4 = 4
    %0 = load i32, ptr %b.addr, align 4              2 = 2
    %1 = load i32, ptr %c.addr, align 4              3 = 3
    %add = add nsw i32 %0, %1                        5 = 2 add 3
    store i32 %add, ptr %a.addr, align 4             5 = 5
    %2 = load i32, ptr %a.addr, align 4              5 = 5
    %3 = load i32, ptr %d.addr, align 4              4 = 4
    %sub = sub nsw i32 %2, %3                        6 = 5 sub 4
    store i32 %sub, ptr %b.addr, align 4             6 = 6
    %4 = load i32, ptr %b.addr, align 4              6 = 6
    %5 = load i32, ptr %c.addr, align 4              3 = 3
    %add1 = add nsw i32 %4, %5                       7 = 6 add 3
    store i32 %add1, ptr %c.addr, align 4            7 = 7
    %6 = load i32, ptr %a.addr, align 4              5 = 5
    %7 = load i32, ptr %d.addr, align 4              4 = 4
    %sub2 = sub nsw i32 %6, %7                       6 = 5 sub 4 (redundant)
    store i32 %sub2, ptr %d.addr, align 4            6 = 6

ValueNumbering: test5
    store i32 %a, ptr %a.addr, align 4               1 = 1
    store i32 %b, ptr %b.addr, align 4               2 = 2
    store i32 %c, ptr %c.addr, align 4               3 = 3
    store i32 %d, ptr %d.addr, align 4               4 = 4
    store i32 %e, ptr %e.addr, align 4               5 = 5
    %0 = load i32, ptr %b.addr, align 4              2 = 2
    %1 = load i32, ptr %c.addr, align 4              3 = 3
    %mul = mul nsw i32 %0, %1                        6 = 2 mul 3
    store i32 %mul, ptr %a.addr, align 4             6 = 6
    %2 = load i32, ptr %b.addr, align 4              2 = 2
    store i32 %2, ptr %d.addr, align 4               2 = 2
    %3 = load i32, ptr %a.addr, align 4              6 = 6
    %4 = load i32, ptr %b.addr, align 4              2 = 2
    %add = add nsw i32 %3, %4                        7 = 6 add 2
    store i32 %add, ptr %c.addr, align 4             7 = 7
    %5 = load i32, ptr %d.addr, align 4              2 = 2
    %6 = load i32, ptr %c.addr, align 4              7 = 7
    %mul1 = mul nsw i32 %5, %6                       8 = 2 mul 7
    store i32 %mul1, ptr %e.addr, align 4            8 = 8
    %7 = load i32, ptr %c.addr, align 4              7 = 7
    %add2 = add nsw i32 %7, 5                        10 = 7 add 9
    store i32 %add2, ptr %d.addr, align 4            10 = 10

ValueNumbering: test6
    store i32 %c, ptr %c.addr, align 4               1 = 1
    store i32 %d, ptr %d.addr, align 4               2 = 2
    store i32 %e, ptr %e.addr, align 4               3 = 3
    store i32 %i, ptr %i.addr, align 4               4 = 4
    store i32 %j, ptr %j.addr, align 4               5 = 5
    store i32 10, ptr %a, align 4                    6 = 6
    store i32 40, ptr %b, align 4                    7 = 7
    %0 = load i32, ptr %i.addr, align 4              4 = 4
    %1 = load i32, ptr %j.addr, align 4              5 = 5
    %mul = mul nsw i32 %0, %1                        8 = 4 mul 5
    store i32 %mul, ptr %t1, align 4                 8 = 8
    %2 = load i32, ptr %t1, align 4                  8 = 8
    %add = add nsw i32 %2, 40                        9 = 8 add 7
    store i32 %add, ptr %c.addr, align 4             9 = 9
    store i32 150, ptr %t2, align 4                  10 = 10
    %3 = load i32, ptr %c.addr, align 4              9 = 9
    %mul1 = mul nsw i32 150, %3                      11 = 10 mul 9
    store i32 %mul1, ptr %d.addr, align 4            11 = 11
    %4 = load i32, ptr %i.addr, align 4              4 = 4
    store i32 %4, ptr %e.addr, align 4               4 = 4
    %5 = load i32, ptr %i.addr, align 4              4 = 4
    %6 = load i32, ptr %j.addr, align 4              5 = 5
    %mul2 = mul nsw i32 %5, %6                       8 = 4 mul 5 (redundant)
    store i32 %mul2, ptr %t3, align 4                8 = 8
    %7 = load i32, ptr %i.addr, align 4              4 = 4
    %mul3 = mul nsw i32 %7, 10                       12 = 4 mul 6
    store i32 %mul3, ptr %t4, align 4                12 = 12
    %8 = load i32, ptr %t1, align 4                  8 = 8
    %9 = load i32, ptr %t4, align 4                  12 = 12
    %add4 = add nsw i32 %8, %9                       13 = 8 add 12
    store i32 %add4, ptr %c.addr, align 4            13 = 13

